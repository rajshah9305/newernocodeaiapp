"use client";

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ExternalLink, Smartphone, Monitor, Tablet, RefreshCw, Maximize2, Code2, Zap } from 'lucide-react';
import { Project } from '@/lib/types';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';

interface LivePreviewProps {
  project: Project;
}

export const LivePreview = ({ project }: LivePreviewProps) => {
  const [viewMode, setViewMode] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');
  const [previewContent, setPreviewContent] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [performanceMetrics, setPerformanceMetrics] = useState({
    loadTime: 0,
    bundleSize: 0,
    lighthouse: 0
  });

  useEffect(() => {
    setIsLoading(true);
    const timer = setTimeout(() => {
      try {
        // Generate intelligent preview based on project description
        const html = generateAdvancedPreviewHTML('');
        setPreviewContent(html);
        
        // Generate realistic performance metrics based on complexity
        const complexity = project.description.toLowerCase().includes('enterprise') ? 'enterprise' : 
                          project.description.toLowerCase().includes('advanced') ? 'advanced' : 'simple';
        const baseLoad = complexity === 'enterprise' ? 400 : complexity === 'advanced' ? 300 : 200;
        setPerformanceMetrics({
          loadTime: baseLoad + Math.random() * 200,
          bundleSize: (complexity === 'enterprise' ? 300 : 150) + Math.random() * 100,
          lighthouse: Math.floor(Math.random() * 5) + (complexity === 'simple' ? 95 : 90)
        });
      } catch (error) {
        console.error('Preview generation error:', error);
        // Fallback to basic preview
        setPreviewContent(`
          <div style="padding: 20px; text-align: center; font-family: Arial;">
            <h1>${project.name}</h1>
            <p>AI-generated application preview</p>
            <div style="background: #f0f0f0; padding: 20px; margin: 20px 0; border-radius: 8px;">
              <h2>🚀 Features</h2>
              <p>Your app is being generated by AI agents...</p>
            </div>
          </div>
        `);
        setPerformanceMetrics({
          loadTime: 250,
          bundleSize: 150,
          lighthouse: 92
        });
      }
      
      setIsLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, [project]);

  const generateCalculatorApp = (): string => {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculator App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        .calculator-button {
            @apply w-16 h-16 text-xl font-semibold rounded-lg transition-all duration-200 active:scale-95;
        }
        .number-btn { @apply bg-gray-100 hover:bg-gray-200 text-gray-800; }
        .operator-btn { @apply bg-blue-500 hover:bg-blue-600 text-white; }
        .equals-btn { @apply bg-green-500 hover:bg-green-600 text-white; }
        .clear-btn { @apply bg-red-500 hover:bg-red-600 text-white; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center">
    <div id="root"></div>
    <script type="text/babel">
        const { useState } = React;
        
        function Calculator() {
          const [display, setDisplay] = useState('0');
          const [previousValue, setPreviousValue] = useState(null);
          const [operation, setOperation] = useState(null);
          const [waitingForOperand, setWaitingForOperand] = useState(false);
          const [history, setHistory] = useState([]);

          const inputNumber = (num) => {
            if (waitingForOperand) {
              setDisplay(String(num));
              setWaitingForOperand(false);
            } else {
              setDisplay(display === '0' ? String(num) : display + num);
            }
          };

          const inputDecimal = () => {
            if (waitingForOperand) {
              setDisplay('0.');
              setWaitingForOperand(false);
            } else if (display.indexOf('.') === -1) {
              setDisplay(display + '.');
            }
          };

          const clear = () => {
            setDisplay('0');
            setPreviousValue(null);
            setOperation(null);
            setWaitingForOperand(false);
          };

          const performOperation = (nextOperation) => {
            const inputValue = parseFloat(display);

            if (previousValue === null) {
              setPreviousValue(inputValue);
            } else if (operation) {
              const currentValue = previousValue || 0;
              const newValue = calculate(currentValue, inputValue, operation);
              
              setDisplay(String(newValue));
              setPreviousValue(newValue);
              
              // Add to history
              setHistory(prev => [...prev.slice(-4), \`\${currentValue} \${operation} \${inputValue} = \${newValue}\`]);
            }

            setWaitingForOperand(true);
            setOperation(nextOperation);
          };

          const calculate = (firstValue, secondValue, operation) => {
            switch (operation) {
              case '+':
                return firstValue + secondValue;
              case '-':
                return firstValue - secondValue;
              case '×':
                return firstValue * secondValue;
              case '÷':
                return firstValue / secondValue;
              case '=':
                return secondValue;
              default:
                return secondValue;
            }
          };

          const handleEquals = () => {
            const inputValue = parseFloat(display);
            
            if (previousValue !== null && operation) {
              const newValue = calculate(previousValue, inputValue, operation);
              setDisplay(String(newValue));
              setHistory(prev => [...prev.slice(-4), \`\${previousValue} \${operation} \${inputValue} = \${newValue}\`]);
              setPreviousValue(null);
              setOperation(null);
              setWaitingForOperand(true);
            }
          };

          const buttons = [
            { label: 'C', type: 'clear', onClick: clear },
            { label: '±', type: 'operator', onClick: () => setDisplay(String(-parseFloat(display))) },
            { label: '%', type: 'operator', onClick: () => setDisplay(String(parseFloat(display) / 100)) },
            { label: '÷', type: 'operator', onClick: () => performOperation('÷') },
            
            { label: '7', type: 'number', onClick: () => inputNumber(7) },
            { label: '8', type: 'number', onClick: () => inputNumber(8) },
            { label: '9', type: 'number', onClick: () => inputNumber(9) },
            { label: '×', type: 'operator', onClick: () => performOperation('×') },
            
            { label: '4', type: 'number', onClick: () => inputNumber(4) },
            { label: '5', type: 'number', onClick: () => inputNumber(5) },
            { label: '6', type: 'number', onClick: () => inputNumber(6) },
            { label: '-', type: 'operator', onClick: () => performOperation('-') },
            
            { label: '1', type: 'number', onClick: () => inputNumber(1) },
            { label: '2', type: 'number', onClick: () => inputNumber(2) },
            { label: '3', type: 'number', onClick: () => inputNumber(3) },
            { label: '+', type: 'operator', onClick: () => performOperation('+') },
            
            { label: '0', type: 'number', onClick: () => inputNumber(0), span: 2 },
            { label: '.', type: 'number', onClick: inputDecimal },
            { label: '=', type: 'equals', onClick: handleEquals },
          ];

          return (
            <div className="bg-white rounded-2xl shadow-2xl p-6 w-80">
              {/* Header */}
              <div className="text-center mb-6">
                <h1 className="text-2xl font-bold text-gray-800">Calculator</h1>
                <p className="text-sm text-gray-500">AI Generated App</p>
              </div>
              
              {/* Display */}
              <div className="bg-gray-900 rounded-lg p-4 mb-4">
                <div className="text-right text-3xl font-mono text-white overflow-hidden">
                  {display}
                </div>
                {operation && (
                  <div className="text-right text-sm text-gray-400 mt-1">
                    {previousValue} {operation}
                  </div>
                )}
              </div>
              
              {/* History */}
              {history.length > 0 && (
                <div className="bg-gray-50 rounded-lg p-3 mb-4 max-h-20 overflow-y-auto">
                  <div className="text-xs text-gray-600 font-semibold mb-1">History:</div>
                  {history.map((calc, index) => (
                    <div key={index} className="text-xs text-gray-500 font-mono">
                      {calc}
                    </div>
                  ))}
                </div>
              )}
              
              {/* Buttons */}
              <div className="grid grid-cols-4 gap-3">
                {buttons.map((button, index) => {
                  const buttonClass = \`calculator-button \${
                    button.type === 'number' ? 'number-btn' :
                    button.type === 'operator' ? 'operator-btn' :
                    button.type === 'equals' ? 'equals-btn' :
                    'clear-btn'
                  } \${button.span === 2 ? 'col-span-2' : ''}\`;
                  
                  return (
                    <button
                      key={index}
                      className={buttonClass}
                      onClick={button.onClick}
                    >
                      {button.label}
                    </button>
                  );
                })}
              </div>
              
              {/* Features */}
              <div className="mt-6 grid grid-cols-2 gap-4 text-center">
                <div className="bg-green-50 rounded-lg p-3">
                  <div className="text-green-600 font-semibold text-sm">✓ Basic Operations</div>
                  <div className="text-xs text-green-500">+, -, ×, ÷</div>
                </div>
                <div className="bg-blue-50 rounded-lg p-3">
                  <div className="text-blue-600 font-semibold text-sm">✓ History Tracking</div>
                  <div className="text-xs text-blue-500">Last 5 calculations</div>
                </div>
              </div>
            </div>
          );
        }
        
        ReactDOM.render(<Calculator />, document.getElementById('root'));
    </script>
</body>
</html>`;
  };

  const generateTaskManagerApp = (): string => {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body class="bg-gray-50">
    <div id="root"></div>
    <script type="text/babel">
        const { useState } = React;
        
        function TaskManager() {
          const [tasks, setTasks] = useState([
            { id: 1, title: 'Design new landing page', completed: false, priority: 'high' },
            { id: 2, title: 'Review pull requests', completed: true, priority: 'medium' },
            { id: 3, title: 'Update documentation', completed: false, priority: 'low' }
          ]);
          const [newTask, setNewTask] = useState('');

          const addTask = () => {
            if (newTask.trim()) {
              setTasks([...tasks, {
                id: Date.now(),
                title: newTask,
                completed: false,
                priority: 'medium'
              }]);
              setNewTask('');
            }
          };

          const toggleTask = (id) => {
            setTasks(tasks.map(task => 
              task.id === id ? { ...task, completed: !task.completed } : task
            ));
          };

          const deleteTask = (id) => {
            setTasks(tasks.filter(task => task.id !== id));
          };

          const completedCount = tasks.filter(t => t.completed).length;

          return (
            <div className="min-h-screen bg-gray-50">
              <div className="max-w-4xl mx-auto p-6">
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                  <h1 className="text-3xl font-bold text-gray-800 mb-2">Task Manager</h1>
                  <p className="text-gray-600">AI Generated Project Management Tool</p>
                  
                  <div className="mt-4 grid grid-cols-3 gap-4">
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">{tasks.length}</div>
                      <div className="text-blue-600">Total Tasks</div>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">{completedCount}</div>
                      <div className="text-green-600">Completed</div>
                    </div>
                    <div className="bg-orange-50 p-4 rounded-lg">
                      <div className="text-2xl font-bold text-orange-600">{tasks.length - completedCount}</div>
                      <div className="text-orange-600">Pending</div>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                  <h2 className="text-xl font-semibold mb-4">Add New Task</h2>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newTask}
                      onChange={(e) => setNewTask(e.target.value)}
                      placeholder="Enter task description..."
                      className="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      onKeyPress={(e) => e.key === 'Enter' && addTask()}
                    />
                    <button
                      onClick={addTask}
                      className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                    >
                      Add Task
                    </button>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg p-6">
                  <h2 className="text-xl font-semibold mb-4">Tasks</h2>
                  <div className="space-y-3">
                    {tasks.map(task => (
                      <div key={task.id} className={\`p-4 border rounded-lg \${task.completed ? 'bg-gray-50 border-gray-200' : 'bg-white border-gray-300'}\`}>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <input
                              type="checkbox"
                              checked={task.completed}
                              onChange={() => toggleTask(task.id)}
                              className="w-5 h-5 text-blue-600"
                            />
                            <span className={\`\${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}\`}>
                              {task.title}
                            </span>
                            <span className={\`px-2 py-1 text-xs rounded \${
                              task.priority === 'high' ? 'bg-red-100 text-red-800' :
                              task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }\`}>
                              {task.priority}
                            </span>
                          </div>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="text-red-500 hover:text-red-700 px-2 py-1"
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          );
        }
        
        ReactDOM.render(<TaskManager />, document.getElementById('root'));
    </script>
</body>
</html>`;
  };

  const generateEcommerceApp = (): string => {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-commerce Store</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const { useState } = React;
        
        function EcommerceStore() {
          const [cart, setCart] = useState([]);
          const [products] = useState([
            { id: 1, name: 'Wireless Headphones', price: 99.99, image: '🎧', category: 'Electronics' },
            { id: 2, name: 'Smart Watch', price: 199.99, image: '⌚', category: 'Electronics' },
            { id: 3, name: 'Coffee Mug', price: 14.99, image: '☕', category: 'Home' },
            { id: 4, name: 'Laptop Stand', price: 49.99, image: '💻', category: 'Office' }
          ]);

          const addToCart = (product) => {
            setCart([...cart, { ...product, cartId: Date.now() }]);
          };

          const removeFromCart = (cartId) => {
            setCart(cart.filter(item => item.cartId !== cartId));
          };

          const totalPrice = cart.reduce((sum, item) => sum + item.price, 0);

          return (
            <div className="min-h-screen bg-gray-50">
              <header className="bg-white shadow-sm">
                <div className="max-w-6xl mx-auto px-6 py-4">
                  <div className="flex justify-between items-center">
                    <h1 className="text-2xl font-bold text-gray-800">AI Store</h1>
                    <div className="flex items-center space-x-4">
                      <span className="text-gray-600">Cart ({cart.length})</span>
                      <span className="font-semibold">${totalPrice.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </header>

              <main className="max-w-6xl mx-auto px-6 py-8">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {products.map(product => (
                    <div key={product.id} className="bg-white rounded-lg shadow-lg overflow-hidden">
                      <div className="p-6 text-center">
                        <div className="text-6xl mb-4">{product.image}</div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-2">{product.name}</h3>
                        <p className="text-gray-600 text-sm mb-4">{product.category}</p>
                        <div className="text-2xl font-bold text-blue-600 mb-4">${product.price}</div>
                        <button
                          onClick={() => addToCart(product)}
                          className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors"
                        >
                          Add to Cart
                        </button>
                      </div>
                    </div>
                  ))}
                </div>

                {cart.length > 0 && (
                  <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
                    <h2 className="text-xl font-semibold mb-4">Shopping Cart</h2>
                    <div className="space-y-3">
                      {cart.map(item => (
                        <div key={item.cartId} className="flex justify-between items-center p-3 border rounded">
                          <div className="flex items-center space-x-3">
                            <span className="text-2xl">{item.image}</span>
                            <span>{item.name}</span>
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="font-semibold">${item.price}</span>
                            <button
                              onClick={() => removeFromCart(item.cartId)}
                              className="text-red-500 hover:text-red-700"
                            >
                              Remove
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="mt-4 pt-4 border-t">
                      <div className="flex justify-between items-center">
                        <span className="text-xl font-semibold">Total: ${totalPrice.toFixed(2)}</span>
                        <button className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600">
                          Checkout
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </main>
            </div>
          );
        }
        
        ReactDOM.render(<EcommerceStore />, document.getElementById('root'));
    </script>
</body>
</html>`;
  };

  const generateSocialApp = (): string => {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social Hub</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const { useState } = React;
        
        function SocialApp() {
          const [posts, setPosts] = useState([
            { id: 1, user: 'Alice Johnson', content: 'Just launched my new AI project! 🚀', likes: 12, time: '2h ago' },
            { id: 2, user: 'Bob Smith', content: 'Beautiful sunset today 🌅', likes: 8, time: '4h ago' },
            { id: 3, user: 'Carol Davis', content: 'Learning React is so much fun!', likes: 15, time: '6h ago' }
          ]);
          const [newPost, setNewPost] = useState('');

          const addPost = () => {
            if (newPost.trim()) {
              setPosts([{
                id: Date.now(),
                user: 'You',
                content: newPost,
                likes: 0,
                time: 'now'
              }, ...posts]);
              setNewPost('');
            }
          };

          const likePost = (id) => {
            setPosts(posts.map(post => 
              post.id === id ? { ...post, likes: post.likes + 1 } : post
            ));
          };

          return (
            <div className="min-h-screen bg-gray-50">
              <header className="bg-white shadow-sm">
                <div className="max-w-2xl mx-auto px-6 py-4">
                  <h1 className="text-2xl font-bold text-gray-800">Social Hub</h1>
                  <p className="text-gray-600">AI Generated Social Platform</p>
                </div>
              </header>

              <main className="max-w-2xl mx-auto px-6 py-8">
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                  <h2 className="text-lg font-semibold mb-4">What's on your mind?</h2>
                  <textarea
                    value={newPost}
                    onChange={(e) => setNewPost(e.target.value)}
                    placeholder="Share something..."
                    className="w-full p-3 border rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="3"
                  />
                  <button
                    onClick={addPost}
                    className="mt-3 px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    Post
                  </button>
                </div>

                <div className="space-y-6">
                  {posts.map(post => (
                    <div key={post.id} className="bg-white rounded-lg shadow-lg p-6">
                      <div className="flex items-center mb-4">
                        <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                          {post.user[0]}
                        </div>
                        <div className="ml-3">
                          <div className="font-semibold text-gray-800">{post.user}</div>
                          <div className="text-sm text-gray-500">{post.time}</div>
                        </div>
                      </div>
                      <p className="text-gray-800 mb-4">{post.content}</p>
                      <div className="flex items-center space-x-4">
                        <button
                          onClick={() => likePost(post.id)}
                          className="flex items-center space-x-2 text-gray-600 hover:text-blue-500 transition-colors"
                        >
                          <span>❤️</span>
                          <span>{post.likes}</span>
                        </button>
                        <button className="text-gray-600 hover:text-blue-500 transition-colors">
                          💬 Comment
                        </button>
                        <button className="text-gray-600 hover:text-blue-500 transition-colors">
                          🔄 Share
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </main>
            </div>
          );
        }
        
        ReactDOM.render(<SocialApp />, document.getElementById('root'));
    </script>
</body>
</html>`;
  };

  const generateAdvancedPreviewHTML = (frontendCode: string): string => {
    const isCalculator = project.description.toLowerCase().includes('calculator');
    const hasAuth = project.description.toLowerCase().includes('login') || project.description.toLowerCase().includes('auth');
    const hasDashboard = project.description.toLowerCase().includes('dashboard');
    const hasRealtime = project.description.toLowerCase().includes('real-time') || project.description.toLowerCase().includes('live');
    
    // Generate specific app types based on user input
    if (isCalculator) {
      return generateCalculatorApp();
    }
    
    // Generate other app types
    const isEcommerce = project.description.toLowerCase().includes('ecommerce') || project.description.toLowerCase().includes('shop') || project.description.toLowerCase().includes('store');
    const isTaskManager = project.description.toLowerCase().includes('task') || project.description.toLowerCase().includes('todo') || project.description.toLowerCase().includes('project management');
    const isSocial = project.description.toLowerCase().includes('social') || project.description.toLowerCase().includes('chat') || project.description.toLowerCase().includes('messaging');
    
    if (isEcommerce) {
      return generateEcommerceApp();
    }
    
    if (isTaskManager) {
      return generateTaskManagerApp();
    }
    
    if (isSocial) {
      return generateSocialApp();
    }
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${project.name}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/framer-motion@10/dist/framer-motion.js"></script>
    <style>
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .glass { backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.1); }
        .animate-pulse-slow { animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        .animate-float { animation: float 6s ease-in-out infinite; }
        @keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-10px); } }
    </style>
</head>
<body class="bg-gray-50">
    <div id="root"></div>
    <script type="text/babel">
        const { useState, useEffect } = React;
        const { motion, AnimatePresence } = Motion;
        
        // Advanced hooks and utilities
        const useAuth = () => {
          const [user, setUser] = useState(${hasAuth ? 'null' : '{ id: 1, name: "Demo User", email: "demo@example.com" }'});
          const [loading, setLoading] = useState(false);

          const login = async (email, password) => {
            setLoading(true);
            await new Promise(resolve => setTimeout(resolve, 1000));
            setUser({ id: 1, name: email.split('@')[0], email });
            setLoading(false);
          };

          return { user, login, loading, logout: () => setUser(null) };
        };

        const useRealTimeData = () => {
          const [data, setData] = useState([]);
          const [connected, setConnected] = useState(${hasRealtime});

          useEffect(() => {
            if (!connected) return;
            
            const interval = setInterval(() => {
              setData(prev => [
                ...prev.slice(-4),
                {
                  id: Date.now(),
                  value: Math.floor(Math.random() * 100),
                  timestamp: new Date().toLocaleTimeString()
                }
              ]);
            }, 2000);

            return () => clearInterval(interval);
          }, [connected]);

          return { data, connected };
        };

        // Advanced Components
        const LoadingSpinner = () => (
          <div className="flex items-center justify-center h-64">
            <div className="relative">
              <div className="w-16 h-16 border-4 border-blue-200 rounded-full animate-spin"></div>
              <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin absolute top-0 left-0"></div>
            </div>
          </div>
        );

        const StatsCard = ({ title, value, change, icon }) => (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-xl shadow-lg p-6 border border-gray-100"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm font-medium">{title}</p>
                <p className="text-3xl font-bold text-gray-900 mt-1">{value}</p>
                {change && (
                  <p className={\`text-sm mt-1 \${change > 0 ? 'text-green-600' : 'text-red-600'}\`}>
                    {change > 0 ? '↗' : '↘'} {Math.abs(change)}%
                  </p>
                )}
              </div>
              <div className="text-3xl">{icon}</div>
            </div>
          </motion.div>
        );

        const LoginForm = ({ onLogin, loading }) => (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="max-w-md mx-auto"
          >
            <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-900">Welcome Back</h2>
                <p className="text-gray-600 mt-2">Sign in to your account</p>
              </div>
              
              <form onSubmit={(e) => { e.preventDefault(); onLogin('demo@example.com', 'password'); }}>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    <input
                      type="email"
                      defaultValue="demo@example.com"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter your email"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
                    <input
                      type="password"
                      defaultValue="password"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter your password"
                    />
                  </div>
                  <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all duration-200 disabled:opacity-50"
                  >
                    {loading ? 'Signing in...' : 'Sign In'}
                  </button>
                </div>
              </form>
            </div>
          </motion.div>
        );

        const Dashboard = ({ user, onLogout }) => {
          const [stats, setStats] = useState({});
          const { data: realTimeData } = useRealTimeData();

          useEffect(() => {
            const timer = setTimeout(() => {
              setStats({
                users: Math.floor(Math.random() * 10000) + 5000,
                revenue: Math.floor(Math.random() * 100000) + 50000,
                orders: Math.floor(Math.random() * 1000) + 500,
                growth: Math.floor(Math.random() * 20) + 5
              });
            }, 500);
            return () => clearTimeout(timer);
          }, []);

          return (
            <div className="space-y-8">
              {/* Header */}
              <div className="flex justify-between items-center">
                <div>
                  <h1 className="text-4xl font-bold text-gray-900">
                    Welcome back, {user.name}! 👋
                  </h1>
                  <p className="text-gray-600 mt-2">Here's what's happening with your ${project.name.toLowerCase()}</p>
                </div>
                <button
                  onClick={onLogout}
                  className="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors"
                >
                  Sign Out
                </button>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <StatsCard title="Total Users" value={stats.users?.toLocaleString() || '...'} change={12} icon="👥" />
                <StatsCard title="Revenue" value={\`$\${stats.revenue?.toLocaleString() || '...'}\`} change={8} icon="💰" />
                <StatsCard title="Orders" value={stats.orders?.toLocaleString() || '...'} change={-3} icon="📦" />
                <StatsCard title="Growth" value={\`\${stats.growth || '...'}%\`} change={15} icon="📈" />
              </div>

              {/* Real-time Data */}
              ${hasRealtime ? `
              <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <span className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                  Real-time Activity
                </h3>
                <div className="space-y-3">
                  {realTimeData.map(item => (
                    <motion.div
                      key={item.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                    >
                      <span>New activity detected</span>
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-500">{item.timestamp}</span>
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm">{item.value}</span>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>` : ''}

              {/* Feature Showcase */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl p-6 text-white">
                  <h3 className="text-2xl font-bold mb-4">🚀 AI-Generated Features</h3>
                  <ul className="space-y-2">
                    <li className="flex items-center"><span className="mr-2">✅</span> Advanced Authentication</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Responsive Design</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Real-time Updates</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Performance Optimized</li>
                  </ul>
                </div>
                
                <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                  <h3 className="text-xl font-bold mb-4">📊 Performance Metrics</h3>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Load Time</span>
                        <span>Fast</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div className="bg-green-500 h-2 rounded-full" style={{width: '85%'}}></div>
                      </div>
                    </div>
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>SEO Score</span>
                        <span>Excellent</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-500 h-2 rounded-full" style={{width: '92%'}}></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        };

        // Main App Component
        function App() {
          const [darkMode, setDarkMode] = useState(false);
          const { user, login, loading } = useAuth();

          return (
            <div className={\`min-h-screen transition-all duration-300 \${darkMode ? 'dark bg-gray-900' : 'bg-gray-50'}\`}>
              {/* Navigation */}
              <nav className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div className="flex justify-between items-center h-16">
                    <div className="flex items-center">
                      <h1 className="text-xl font-bold text-gray-900 dark:text-white">
                        ${project.name}
                      </h1>
                      <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                        AI Generated
                      </span>
                    </div>
                    <button
                      onClick={() => setDarkMode(!darkMode)}
                      className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                    >
                      {darkMode ? '☀️' : '🌙'}
                    </button>
                  </div>
                </div>
              </nav>

              {/* Main Content */}
              <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <AnimatePresence mode="wait">
                  {loading ? (
                    <LoadingSpinner />
                  ) : user ? (
                    <Dashboard user={user} onLogout={() => window.location.reload()} />
                  ) : (
                    <LoginForm onLogin={login} loading={loading} />
                  )}
                </AnimatePresence>
              </main>
            </div>
          );
        }
        
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>`;
  };

  const getViewportClass = () => {
    switch (viewMode) {
      case 'mobile':
        return 'w-80 h-[600px]';
      case 'tablet':
        return 'w-[768px] h-[600px]';
      default:
        return 'w-full h-[600px]';
    }
  };

  const refreshPreview = () => {
    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
      // Simulate refresh
      const iframe = document.querySelector('iframe');
      if (iframe) {
        iframe.src = iframe.src;
      }
    }, 1000);
  };

  return (
    <div className="space-y-6">
      {/* Preview Header */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-4">
              <CardTitle className="flex items-center gap-2">
                <ExternalLink className="w-5 h-5" />
                Live Preview
              </CardTitle>
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                Live
              </Badge>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={refreshPreview}
                disabled={isLoading}
              >
                <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
              </Button>
              
              <div className="flex space-x-1 border rounded-lg p-1">
                <Button
                  variant={viewMode === 'desktop' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('desktop')}
                >
                  <Monitor className="w-4 h-4" />
                </Button>
                <Button
                  variant={viewMode === 'tablet' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('tablet')}
                >
                  <Tablet className="w-4 h-4" />
                </Button>
                <Button
                  variant={viewMode === 'mobile' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('mobile')}
                >
                  <Smartphone className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </CardHeader>
        
        <CardContent>
          <Tabs defaultValue="preview" className="w-full">
            <TabsList>
              <TabsTrigger value="preview">Preview</TabsTrigger>
              <TabsTrigger value="metrics">Performance</TabsTrigger>
            </TabsList>
            
            <TabsContent value="preview" className="mt-4">
              <div className="flex justify-center bg-gray-100 dark:bg-gray-800 rounded-lg p-4">
                <motion.div
                  className={`border border-gray-300 rounded-lg overflow-hidden shadow-lg ${getViewportClass()}`}
                  initial={{ scale: 0.9, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  {isLoading ? (
                    <div className="w-full h-full flex items-center justify-center bg-white">
                      <div className="text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                        <p className="text-gray-600">Building your app...</p>
                        <p className="text-sm text-gray-400 mt-2">AI agents are assembling the code</p>
                      </div>
                    </div>
                  ) : previewContent ? (
                    <iframe
                      srcDoc={previewContent}
                      className="w-full h-full border-0"
                      title="App Preview"
                      sandbox="allow-scripts allow-same-origin"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-50">
                      <div className="text-center">
                        <Code2 className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-600">No preview available</p>
                      </div>
                    </div>
                  )}
                </motion.div>
              </div>
            </TabsContent>
            
            <TabsContent value="metrics" className="mt-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card>
                  <CardContent className="p-6 text-center">
                    <Zap className="w-8 h-8 text-green-500 mx-auto mb-2" />
                    <h3 className="font-semibold text-green-600">Load Time</h3>
                    <p className="text-2xl font-bold">{performanceMetrics.loadTime.toFixed(0)}ms</p>
                    <p className="text-sm text-gray-500">Excellent</p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-6 text-center">
                    <Code2 className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                    <h3 className="font-semibold text-blue-600">Bundle Size</h3>
                    <p className="text-2xl font-bold">{performanceMetrics.bundleSize.toFixed(0)}KB</p>
                    <p className="text-sm text-gray-500">Optimized</p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-6 text-center">
                    <Monitor className="w-8 h-8 text-purple-500 mx-auto mb-2" />
                    <h3 className="font-semibold text-purple-600">Lighthouse</h3>
                    <p className="text-2xl font-bold">{performanceMetrics.lighthouse}/100</p>
                    <p className="text-sm text-gray-500">High Performance</p>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Feature Highlights */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {[
          { icon: "✅", title: "Responsive Design", desc: "Works on all devices" },
          { icon: "🎨", title: "Modern UI", desc: "Beautiful Tailwind styling" },
          { icon: "⚡", title: "Fast Performance", desc: "Optimized for speed" },
          { icon: "🔒", title: "Secure", desc: "Built-in security features" }
        ].map((feature, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl mb-2">{feature.icon}</div>
                <h3 className="font-semibold text-sm">{feature.title}</h3>
                <p className="text-xs text-gray-500 mt-1">{feature.desc}</p>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>
    </div>
  );
};